pragma solidity ^0.5.0;

import "./IERC20.sol";
import "./SafeMathLib.sol";
import "./FITHTokenSaleReferrals.sol";

/**
 * @dev Fiatech ETH discount sale promotion contract.
 */
contract FITHTokenSaleRefAndPromo is FITHTokenSaleReferrals
{
	using SafeMathLib for uint;
	
	// DAI stable coin smart contrat address
	address public daiContractAddress;
	
	uint public ethPrice = 23000; // eth price in USD stable coin that could change anytime, for 258.67 we store 25867 and divide by 100
	uint public ethDiscountPercent = 2000; // percent = ethDiscountPercent / 10000 = 0.2 = 20%
	
	
	// eth each token sale user used to buy tokens
	mapping(address => uint) public ethBalances;
	
	// dai balances for users participating in eth promo
	mapping(address => uint) public daiBalances;
	
	
	// dai deposit event
	event DaiDeposit(address indexed from, uint tokens);
	
	// Dai withdrawal event
	event DaiWithdrawal(address indexed from, uint tokens);
	
	// Eth price updated event
	event EthPriceUpdated(address indexed admin, uint newEthPrice);
	
	// Eth Discount Percent updated event
	event EthDiscountPercentUpdated(address indexed admin, uint newEthDiscountPercent);
	
	
	
	/**
	 * @dev Constructor
	 */
    constructor(IERC20 _tokenContract, uint256 _tokenPrice, IERC20 _stableCoinContract)
		FITHTokenSaleReferrals(_tokenContract, _tokenPrice)
		public
	{
		daiContractAddress = address(_stableCoinContract);
    }
	
	
	
	// update eth price
	function updateEthPrice(uint newEthPrice) public onlyOwner returns(bool) {
		require(newEthPrice != ethPrice, "EthPromo/same-eth-price");
		
		ethPrice = newEthPrice;
		emit EthPriceUpdated(msg.sender, newEthPrice);
		return true;
	}
	
	// update eth discount percent as integer down to 0.0001 discount
	function updateEthDiscountPercent(uint newEthDiscountPercent) public onlyOwner returns(bool) {
		require(newEthDiscountPercent != ethDiscountPercent, "EthPromo/same-eth-discount-percent");
		require(newEthDiscountPercent > 0 && newEthDiscountPercent < 10000, "EthPromo/eth-discount-percent-out-of-range");
		
		ethDiscountPercent = newEthDiscountPercent;
		emit EthDiscountPercentUpdated(msg.sender, newEthDiscountPercent);
		return true;
	}
	
	
	
	// referer is address instead of string
	function fithBalanceOf(address user) public view returns(uint) {
		
		return IERC20(tokenContract).balanceOf(user);
    }
	
	//---
	// NOTE: Prior to calling this function, user has to call "approve" on the DAI contract allowing this contract to transfer on his behalf.
	// Transfer dai stable coins on behalf of the user and register amounts for the ETH promo.
	// NOTE: This is needed for the ETH prmotion:
	// -To register each user DAI amounts for eth promo calculations and also to be able to withdraw user DAI at any time.
	//---
	function depositDaiAfterApproval(address from, uint256 tokens) public returns(bool) {
		
		// this contract transfers dai for deposit on behalf of user after approval
		require(IERC20(daiContractAddress).transferFrom(from, address(this), tokens), "depositDaiAfterApproval failed");
		
		// register dai amounts for each user
		daiBalances[from] = daiBalances[from].add(tokens);
		
		emit DaiDeposit(from, tokens);
		
		return true;
	}
	
	//---
	// User withdraws from his dai balance available
	// NOTE: If sender is owner, he withdraws from dai profit balance available
	//---
	function withdrawDai(uint256 tokens) public returns(bool) {
		require(daiBalances[msg.sender] >= tokens, "EthPromo/insufficient-dai-balance");
		
		// this contract transfers dai to user
		require(IERC20(daiContractAddress).transfer(msg.sender, tokens), "EthPromo/Dai.transfer failed");
		
		// register dai withdrawals for each user
		daiBalances[msg.sender] = daiBalances[msg.sender].sub(tokens);
		
		emit DaiWithdrawal(msg.sender, tokens);
		
		return true;
	}
	
	
	
	//---
	// Contract owner withdraws from dai profit balance available
	//---
	/*function withdrawDaiProfit(uint256 tokens) public onlyOwner returns(bool) {
		require(daiBalance >= tokens, "EthPromo/insufficient-dai-balance");
		
		// this contract sends dai to owner, it is company profit withdrawal
		require(IERC20(daiContractAddress).transfer(msg.sender, tokens), "EthPromo/Dai.transfer failed");
		
		// register dai withdrawals
		daiBalance = daiBalance.sub(tokens);
		
		emit DaiProfitWithdrawal(tokens);
		
		return true;
	}*/
	
	
	
	// returns eth cost in dai stable coin wei with 18 decimals
	function calculateEthWeiCost(uint256 ethWei) public view returns(uint256) {
		// 100 is for 2 decimal places for pennies
		// divide by 10**18 to get eth wei to eth and multiply by 10**18 to get dai stable coin wei as it has 18 decimals
		//return (ethWei * ethPrice / (10**18) / 100 * (10**18));
		//return (ethWei * ethPrice / 100);
		//return (ethWei.mul(ethPrice).div(10**18).div(100));
		return (ethWei.mul(ethPrice).div(100));
	}
	
	function calculateDaiWithDiscount(uint256 dai) public view returns(uint256) {
		// we can represent discounts precision down to 0.01% = 0.0001, so we use 10000 factor
		//return (dai * (10000 - ethDiscountPercent) / 10000);
		return (dai.mul(10000 - ethDiscountPercent).div(10000));
	}
	
	//---
	// User buys eth at discount according to eth promo rules and his dai balance available
	//---
	function buyEthAtDiscount(uint256 ethWei) public returns(bool) {
		require(ethBalances[msg.sender] >= ethWei, "EthPromo/eth-promo-limit-reached");
		require(ethPrice > 0, "EthPromo/ethPrice-is-zero");
		
		uint daiCost;
		
		//daiCost = ethWei * ethWeiPrice * (10000 - ethDiscountPercent) / 10000;
		
		daiCost = calculateEthWeiCost(ethWei);
		// calculate discounted price
		daiCost = calculateDaiWithDiscount(daiCost);
		
		// register dai withdrawals for each user
		daiBalances[msg.sender] = daiBalances[msg.sender].sub(daiCost);
		
		// dai profit goes to owner that can withdraw anytime after eth sales excluding users balances
		daiBalances[owner] = daiBalances[owner].add(daiCost);
		
		// register eth promo left for current user
		ethBalances[msg.sender] = ethBalances[msg.sender].sub(ethWei);
		
		// transfer to the user the ether he bought at promotion
        (msg.sender).transfer(ethWei);
		
		return true;
	}
	
	
	
	///---
	/// NOTE: Having special end sale function to handle dai stable coin profit as well is not needed,
	/// because owner can always withdraw that profit using 'withdrawDai' function.
	///---
	
	/**
	 * This contract has special end sale function to handle dai stable coin profit as well.
	 */
	/*function endSale() public onlyOwner {
		// transfer remaining FITH tokens from this contract back to owner
        require(tokenContract.transfer(owner, tokenContract.balanceOf(address(this))), "Transfer token-sale token balance to owner failed");
		
		// transfer remaining dai profit from this contract to owner
		require(IERC20(daiContractAddress).transfer(owner, daiBalances[owner]), "EthPromo/Dai.profit.transfer failed");
		
        // Just transfer the ether balance to the owner
        owner.transfer(address(this).balance);
    }*/
	
	
	
	/**
	 * Accept ETH for tokens
	 */
    function () external payable {
		uint tks = (msg.value).div(tokenPrice);
		
		address refererAddress = address(0);
		bytes memory msgData = msg.data;
		// 4 bytes for signature
		if (msgData.length > 4) {
			assembly {
				refererAddress := mload(add(msgData, 20))
			}
		}
		
		_buyTokens(tks, refererAddress);
		
		// store eth of each token sale user
		ethBalances[msg.sender] = ethBalances[msg.sender].add(msg.value);
    }
}